--> create an exception for UserNotFound

--> Throw the exception during delete 
---> and handle it 
--------------------------------------------------------------------------app.prop
server.port=2345
#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.url=jdbc:mysql://localhost:3306/autb
spring.datasource.username=root
spring.datasource.password=Mahi@0507
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto=validate


------------------------------------------------------------------------emp model
package com.example.employee.model;

import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class Employee {
    @Id
	private int eid;
	private String ename;
	private String edept;
	private String ecity;
	private String equal;
	private String egend;
	private int erate;
	
	public Employee() {
		// TODO Auto-generated constructor stub
	}
	//{"eid":"2","ename":"mahi","edept":"cse","ecity":"atp","equal":"B.tech","egend":"female","erate":"4"}


	public int getEid() {
		return eid;
	}

	public void setEid(int eid) {
		this.eid = eid;
	}

	public String getEname() {
		return ename;
	}

	public void setEname(String ename) {
		this.ename = ename;
	}

	public String getEdept() {
		return edept;
	}

	public void setEdept(String edept) {
		this.edept = edept;
	}

	public String getEcity() {
		return ecity;
	}

	public void setEcity(String ecity) {
		this.ecity = ecity;
	}

	public String getEqual() {
		return equal;
	}

	public void setEqual(String equal) {
		this.equal = equal;
	}

	public String getEgend() {
		return egend;
	}

	public void setEgend(String egend) {
		this.egend = egend;
	}

	public int getErate() {
		return erate;
	}

	public void setErate(int erate) {
		this.erate = erate;
	}

	@Override
	public String toString() {
		return "Employee [eid=" + eid + ", ename=" + ename + ", edept=" + edept + ", ecity=" + ecity + ", equal="
				+ equal + ", egend=" + egend + ", erate=" + erate + "]";
	}

	public Employee(int eid, String ename, String edept, String ecity, String equal, String egend, int erate) {
		super();
		this.eid = eid;
		this.ename = ename;
		this.edept = edept;
		this.ecity = ecity;
		this.equal = equal;
		this.egend = egend;
		this.erate = erate;
	}
	
}
-------------------------------------------------------------------------------------emp dao
package com.example.employee.dao;

import java.util.List;

import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.example.employee.model.Employee;
@Repository
public interface Empdao extends CrudRepository<Employee, Integer> {
	
public List<Employee> findByename(String ename);
public List<Employee> findByedeptIgnoreCase(String edept);
public List<Employee> findByEdeptAndEcity(String edept,String ecity);
public List<Employee> findByequal(String equal);
@Query("select emp from Employee emp where emp.erate>4")
public List<Employee> findByErateGreater(int erate);
@Query("select e from Employee e where e.erate>4 AND e.equal='B.tech'")
public List<Employee> findByErateGreaterAndEqual(int erate,String equal);
@Query("select e from Employee e where e.erate>4 AND e.ecity=:ecity")
public List<Employee> findByErateGreaterAndEcity(@Param("ecity") String ecity);
@Query("select emp from Employee emp where emp.erate<3")
public List<Employee> findByErateLesser(int erate);
@Query("select e from Employee e where e.erate<3 AND e.edept='it'")
public List<Employee> findByErateLesserAndEdept(int erate,String edept);
@Query("select e from Employee e where e.erate<3 AND e.edept=:edept")
public List<Employee> findByErateLesserAndEdept(@Param("edept") String edept);



}
---------------------------------------------------------------------emp service
package com.example.employee.service;

import java.util.List;


import org.springframework.stereotype.Service;

import com.example.employee.exception.Useralreadyexist;
import com.example.employee.exception.Useridnotfound;
import com.example.employee.model.Employee;

@Service
public interface EmpService   {
public Employee Saveemp(Employee employee)throws Useralreadyexist;
public List<Employee> getallemp();
public Employee getemp(int eid);
public String delemp(int eid) throws Useridnotfound;
public Employee updateemp(Employee employee);

public List<Employee> getempbyname(String ename);
public List<Employee> findByedeptIgnoreCase(String edept);
public List<Employee> findByEdeptAndEcity(String edept,String ecity);
public List<Employee> getempbyequal(String equal);
public List<Employee> findByErateGreater();
public List<Employee> findByErateGreaterAndEqual();
public List<Employee> findByErateGreaterAndEcity(String ecity);
public List<Employee> findByErateLesser();
public List<Employee> findByErateLesserAndEdept();
public List<Employee> findByErateLesserAndEdept(String edept);



 
}
---------------------------------------------------------------emp serv impl
package com.example.employee.serviceimpl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.example.employee.dao.Empdao;
import com.example.employee.exception.Useralreadyexist;
import com.example.employee.exception.Useridnotfound;
import com.example.employee.model.Employee;
import com.example.employee.service.EmpService;

@Service
public class Empserviceimpl implements EmpService {
@Autowired
Empdao empdao;
	@Override
	public Employee Saveemp(Employee employee) throws Useralreadyexist {
		Employee foundemp=getemp(employee.getEid());
		if(foundemp!=null)
			throw new Useralreadyexist();
		String nm=nameGenerator(employee.getEname());
		employee.setEname(nm);
			return empdao.save(employee);	
	}

	private String nameGenerator(String ename) {
		return ename.toUpperCase();
	}

	@Override
	public List<Employee> getallemp() {
		
		 return (List<Employee>) empdao.findAll();
	}

	@Override
	public Employee getemp(int eid) {
		Optional <Employee> empopt=empdao.findById(eid);
		if (empopt.isPresent()) {
			return empopt.get();
		}
		return null;
	}

	@Override
	public String delemp(int eid)throws Useridnotfound {
		Employee employee=getemp(eid);
		if(employee!=null) 
		{
			empdao.delete(employee);
			return "employee can be deleted";
		}
		else 
		{
		      throw new Useridnotfound();
		      
		      
		}
	}

	@Override
	public Employee updateemp(Employee employee) {
		
		return empdao.save(employee);
	}

	@Override
	public List<Employee> getempbyname(String ename) {
		
		return empdao.findByename(ename);
	}

	
	

	@Override
	public List<Employee> getempbyequal(String equal) {
		return empdao.findByequal(equal);
	}

	@Override
	public List<Employee> findByEdeptAndEcity(String edept, String ecity) {
		
		return empdao.findByEdeptAndEcity(edept, ecity);
	}

	@Override
	public List<Employee> findByedeptIgnoreCase(String edept) {
		
		return empdao.findByedeptIgnoreCase(edept);
	}

	@Override
	public List<Employee> findByErateGreater() {
		// TODO Auto-generated method stub
		return empdao.findByErateGreater(0);
	}

	@Override
	public List<Employee> findByErateGreaterAndEqual() {
		// TODO Auto-generated method stub
		return empdao.findByErateGreaterAndEqual(0, null);
	}

	@Override
	public List<Employee> findByErateGreaterAndEcity(String ecity) {
		// TODO Auto-generated method stub
		return empdao.findByErateGreaterAndEcity(ecity);
	}

	@Override
	public List<Employee> findByErateLesser() {
		// TODO Auto-generated method stub
		return empdao.findByErateLesser(0);
	}

	@Override
	public List<Employee> findByErateLesserAndEdept() {
		// TODO Auto-generated method stub
		return empdao.findByErateLesserAndEdept(0, null);
	}

	@Override
	public List<Employee> findByErateLesserAndEdept(String edept) {
		// TODO Auto-generated method stub
		return empdao.findByErateLesserAndEdept(edept);
	}

	
	



	

}
-------------------------------------------------------------------emp ctrlr
package com.example.employee.ctlr;


import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.employee.exception.Useralreadyexist;
import com.example.employee.exception.Useridnotfound;
import com.example.employee.model.Employee;
import com.example.employee.service.EmpService;

@RestController
@RequestMapping("employees")
public class Empctrlr {
@Autowired
EmpService empservice;

@PostMapping
public ResponseEntity<Employee> Saveemp(@RequestBody Employee employee)throws Useralreadyexist
{
	Employee savedemp=empservice.Saveemp(employee);
	
	return new ResponseEntity<Employee> (savedemp, HttpStatus.CREATED);
	
}
@GetMapping
public ResponseEntity<List<Employee>> getallemp()
{
	List<Employee> employees=empservice.getallemp();
	
	return new ResponseEntity<List<Employee>> (employees, HttpStatus.FOUND);
	
}
@GetMapping("{eid}")
public ResponseEntity<Employee> getemp(@PathVariable int eid)
{
	Employee emp=empservice.getemp(eid);
	
	return new ResponseEntity<Employee> (emp, HttpStatus.FOUND);
	
}
@DeleteMapping("{eid}")
public ResponseEntity<String> delemp(@PathVariable int eid) throws Useridnotfound
{
	String result=empservice.delemp(eid);
	
	return new ResponseEntity<String> (result, HttpStatus.FOUND);
	
}
@PutMapping
public ResponseEntity<Employee> updateemp(@RequestBody Employee employee)
{
	Employee savedemp=empservice.updateemp(employee);
	
	return new ResponseEntity<Employee> (savedemp, HttpStatus.CREATED);
	
}
@GetMapping("name/{ename}")
public ResponseEntity<Object> getempbyname(@PathVariable String ename)
{
	
	List<Employee> employees=empservice.getempbyname(ename);
	if(employees.size()!=0)
	return new ResponseEntity<Object> (employees, HttpStatus.FOUND);
	else
		return new ResponseEntity<Object> ("Data not found", HttpStatus.NOT_FOUND);
	
}
@GetMapping("dept/{edept}")
public ResponseEntity<Object> getempbydept(@PathVariable String edept)
{
	
	List<Employee> employees=empservice.findByedeptIgnoreCase(edept);
	if(employees.size()!=0)
	return new ResponseEntity<Object> (employees, HttpStatus.FOUND);
	else
		return new ResponseEntity<Object> ("Data not found", HttpStatus.NOT_FOUND);
	
}
@GetMapping("dept/city/{edept}/{ecity}")
public ResponseEntity<List<Employee>> findByEdeptAndEcity(@PathVariable String edept,@PathVariable String ecity)
{
	
	List<Employee> employees=empservice.findByEdeptAndEcity(edept, ecity);
	if(employees.size()!=0)
	return new ResponseEntity<List<Employee>> (employees, HttpStatus.FOUND);
	else
		return new ResponseEntity<List<Employee>> (employees, HttpStatus.NOT_FOUND);
	
}
@GetMapping("qual/{equal}")
public ResponseEntity<Object> getempbyequal(@PathVariable String equal)
{
	
	List<Employee> employees=empservice.getempbyequal(equal);
	if(employees.size()!=0)
	return new ResponseEntity<Object> (employees, HttpStatus.FOUND);
	else
		return new ResponseEntity<Object> ("Data not found", HttpStatus.NOT_FOUND);
	
}
@GetMapping("rating")
public ResponseEntity<List<Employee>> findByErateGreater()
{
	
	List<Employee> employees=empservice.findByErateGreater();
	if(employees.size()!=0)
	return new ResponseEntity<List<Employee>> (employees, HttpStatus.FOUND);
	else
		return new ResponseEntity<List<Employee>> (employees, HttpStatus.NOT_FOUND);
	
}
@GetMapping("ratingqual")
public ResponseEntity<List<Employee>> findByErateGreaterAndEqual()
{
	
	List<Employee> employees=empservice.findByErateGreaterAndEqual();
	if(employees.size()!=0)
	return new ResponseEntity<List<Employee>> (employees, HttpStatus.FOUND);
	else
		return new ResponseEntity<List<Employee>> (employees, HttpStatus.NOT_FOUND);
	
}
@GetMapping("ratingcity/{ecity}")
public ResponseEntity<List<Employee>> findByErateGreaterAndEcity(@PathVariable String ecity)
{
	
	List<Employee> employees=empservice.findByErateGreaterAndEcity(ecity);
	if(employees.size()!=0)
	return new ResponseEntity<List<Employee>> (employees, HttpStatus.FOUND);
	else
		return new ResponseEntity<List<Employee>> (employees, HttpStatus.NOT_FOUND);
	
}
@GetMapping("ratingless")
public ResponseEntity<List<Employee>> findByErateLesser()
{
	
	List<Employee> employees=empservice.findByErateLesser();
	if(employees.size()!=0)
	return new ResponseEntity<List<Employee>> (employees, HttpStatus.FOUND);
	else
		return new ResponseEntity<List<Employee>> (employees, HttpStatus.NOT_FOUND);
	
}
@GetMapping("ratinglessdept")
public ResponseEntity<List<Employee>> findByErateLesserAndEdept()
{
	
	List<Employee> employees=empservice.findByErateLesserAndEdept();
	if(employees.size()!=0)
	return new ResponseEntity<List<Employee>> (employees, HttpStatus.FOUND);
	else
		return new ResponseEntity<List<Employee>> (employees, HttpStatus.NOT_FOUND);
	
}
@GetMapping("ratingdept/{edept}")
public ResponseEntity<List<Employee>> findByErateLesserAndEdept(@PathVariable String edept)
{
	
	List<Employee> employees=empservice.findByErateLesserAndEdept(edept);
	if(employees.size()!=0)
	return new ResponseEntity<List<Employee>> (employees, HttpStatus.FOUND);
	else
		return new ResponseEntity<List<Employee>> (employees, HttpStatus.NOT_FOUND);
	
}



}
-------------------------------------------------------------------------------useralreadyexist exception class
package com.example.employee.exception;

public class Useralreadyexist extends Exception {
public Useralreadyexist() {
	// TODO Auto-generated constructor 
super("Employee registred already with given id");
}
}
--------------------------------------------------------------------------------- useridnotfound exception class
package com.example.employee.exception;

public class Useridnotfound extends Exception {
	public Useridnotfound() {
		// TODO Auto-generated constructor stub
		super("Employee id not found so u cannot delete");
	}

}
---------------------------------------------------------------------------------exceptionhandler
package com.example.employee.handler;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import com.example.employee.exception.Useralreadyexist;
import com.example.employee.exception.Useridnotfound;

@ControllerAdvice
@Component
public class Exceptionhandler {
	@ExceptionHandler(Useralreadyexist.class)
 public ResponseEntity<String> Authorregistredhandler(){
		
	 return new ResponseEntity<String>("Author with the given author id already registered",HttpStatus.NOT_ACCEPTABLE);
 }
	@ExceptionHandler(Useridnotfound.class)
	public ResponseEntity<String> Empidhandler()
	{
		return new ResponseEntity<String>("Employee with given id is not there so u cannot delete",HttpStatus.NOT_ACCEPTABLE);
	}
}
